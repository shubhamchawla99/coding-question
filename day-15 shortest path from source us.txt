day-15 shortest path from source using priority queue

QL - https://www.codingninjas.com/studio/problems/dijkstra's-shortest-path_985358?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf

#include<bits/stdc++.h>
using namespace std;

vector<int> dijkstra(vector<vector<int>> &edge, int vertices, int edges, int source)
{   int n= vertices ;
    int E = edges;
    // Write your code here.
    // 'edge' contains {u, v, distance} vectors.
    vector<pair<int,int>> adj[n+1];
    for(int i=0; i< E ;i++){
        int u = edge[i][0];
        int v =  edge[i][1];
        int wt =  edge[i][2];
        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
    }
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq ;
    vector<int> dist(n,1e9) ;
    dist[source]=0 ;
    pq.push({0,source});
    while(!pq.empty()){
        auto it = pq.top() ;
        int node = it.second ;
        int dis = it.first ;
        pq.pop();
        for(auto it : adj[node]){
            int adjnodee = it.first ;
            int wt = it.second ;
                if( dist[node] + wt < dist[adjnodee] ){
                    dist[adjnodee] = dist[node] + wt ;
                    pq.push({dist[adjnodee], adjnodee}); 
                }
        }
    }
    return dist ;
}